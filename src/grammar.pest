
// IGNORE
WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\\," |"\\quad" | "\\\\" }
COMMENT = _{ "%" ~ (!"\n" ~ ANY)* ~ "\n" }
IGNORE = _{WHITESPACE | COMMENT}

// FILE PARSING
outside = _{ (!"\\begin{program}" ~ ANY)+ }
main = _{ SOI ~ (outside? ~ program ~ outside?)* ~ outside? ~ EOI }

// look for {program} environments
program = _{
  "\\begin{program}" ~ IGNORE* ~
  ( math_evn ~ IGNORE* )* ~
  "\\end{program}"
}

statement = { definition | print_statement | expr_statement }
expr_statement = { expr }
print_statement = {"\\print{" ~ expr ~ "}"}
definition = { identifier ~ "=" ~ expr }

// in {program}, look for math environments
math_evn = _{
  "$" ~ IGNORE* ~ statement ~ IGNORE* ~ "$"
}

expr = ${ 
	prefix? ~ primary ~ postfix? ~ (infix ~ prefix? ~ primary ~ postfix? )* 
}

// ATOMIC EXPRESSIONS
primary   = _{ 
  // number types
  number_literal | 
  // brackets
  "(" ~ expr ~ ")" | 
  "\\left"~"(" ~ expr ~ "\\right"~")" | 
  "{" ~ expr ~ "}" | 
  // {} enclosed expressions
  enclosed |
  // Identifiers 
  // (after \frac etc. since \phi is valid)
  identifier 
} 

// LITERALS
number_literal = _{ real | integer }
real = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) ~ "." ~ (ASCII_DIGIT)* }
integer = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }

// BRACKETED, ENCLOSED {}
enclosed = _{ frac }
frac = { "\\frac{" ~ expr ~ "}" ~ "{" ~ expr ~ "}"}

// IDENTIFIERS
// keywords are names that may not follow after \
// e.g. \phi is a valid identifier, \left is not
keyword = { "\\left" | "\\right" | "\\cdot" | "\\frac" }
identifier = @{ (!keyword ~ (simple_identifier | latex_symbol)) ~ subscript? }
simple_identifier = _{ ASCII_ALPHA }
latex_symbol = _{ "\\" ~ ASCII_ALPHA+ }
// subscript = _{ "_" ~ "{" ~ ASCII_ALPHA* ~ "}" | "_" ~ ASCII_ALPHANUMERIC }
subscript = { "_" ~ (ASCII_ALPHANUMERIC | "{" ~ nested_block ~ "}") }
nested_block = { (!("{" | "}") ~ ANY)* ~ ("{" ~ nested_block ~ "}" ~ (!("{" | "}") ~ ANY)*)* }

// OPERATORS
// infix
infix     = _{ 
	// optional whitespace around an infix operator is ok
	WHITESPACE* ~ (add | sub | mul | div | pow ) ~ WHITESPACE*
    // but also try to parse semantic white space for implicit mul
    | mul_implicit
}
add       = { "+" } // Addition
sub       = { "-" } // Subtraction
mul       = { "\\cdot" } // Multiplication
mul_implicit = { WHITESPACE* }
div       = { "/" } // Division
pow       = { "^" } // Exponentiation
// prefix
prefix    = _{ neg }
neg       = { "-" } // Negation
// postfix
postfix   = _{ fac }
fac       = { "!" } // Factorial
