
  // IGNORE
  WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\\," |"\\quad" | "\\\\" }
  COMMENT = _{ "%" ~ (!"\n" ~ ANY)* ~ "\n" }
  IGNORE = _{WHITESPACE | COMMENT}

  // FILE PARSING
  outside = _{ (!"\\begin{program}" ~ ANY)+ }
  main = _{ SOI ~ (outside? ~ program ~ outside?)* ~ outside? ~ EOI }

  // look for {program} environments
  program = _{
    "\\begin{program}" ~ IGNORE* ~
    ( math_evn ~ IGNORE* )* ~
    "\\end{program}"
  }

  statement = { fn_definition |definition | print_statement | expr_statement }
  expr_statement = { expr }
  print_statement = {"\\print{" ~ expr ~ "}"}
  definition = { identifier ~ "=" ~ expr }
  fn_definition = { fn_signautre ~ "=" ~ expr }

  // in {program}, look for math environments
  math_evn = _{
    "$" ~ IGNORE* ~ statement ~ IGNORE* ~ "$"
  }

  expr = ${ 
    prefix? ~ WHITESPACE* ~ primary ~ postfix? ~ (infix ~ prefix?~ WHITESPACE* ~ primary ~ postfix? )* 
  }

  // ATOMIC EXPRESSIONS
  primary   = _{ 
    // number types
    number_literal | 
    // brackets
    bracketed_expr |
    // function calls have high priority
    fn_app | 
    // {} enclosed expressions
    enclosed |
    // Identifiers 
    // (after \frac etc. since \phi is valid)
    identifier 
  } 

  bracketed_expr = !{
    "(" ~ expr ~ ")" | 
    "\\left"~"(" ~ expr ~ "\\right"~")" | 
    "{" ~ expr ~ "}" 
  }

  // functions
  fn_app = !{
    identifier ~ "(" ~ (expr ~ ("," ~ expr)* | expr?) ~")" | 
    identifier ~ "\\left"~"(" ~ (expr ~ ("," ~ expr)* | expr?) ~ "\\right"~")" | 
    identifier ~ "{" ~ (expr~ ("," ~ expr)* | expr?) ~ "}" 
  }
  fn_signautre = !{
    identifier ~ "(" ~ (identifier ~ ("," ~ identifier)* | identifier?) ~")" | 
    identifier ~ "\\left"~"(" ~ (identifier ~ ("," ~ identifier)* | identifier?) ~ "\\right"~")" | 
    identifier ~ "{" ~ (identifier~ ("," ~ identifier)* | identifier?) ~ "}" 
  }

  // LITERALS
  number_literal = _{ real | integer | digit | infinity }
  real = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) ~ "." ~ (ASCII_DIGIT)* }
  digit = @{ ASCII_DIGIT } 
  integer = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
  infinity = @{ "\\infty" }

  // BRACKETED, ENCLOSED {}
  enclosed = _{ frac | sqrt | nthroot }
  frac = !{ ("\\frac" | "\\sfrac") ~ "{" ~ expr ~ "}" ~ "{" ~ expr ~ "}"}
  sqrt = !{ "\\sqrt" ~ "{" ~ expr ~ "}" }
  nthroot = !{ "\\sqrt"~("[" ~ expr ~ "]" )?~"{" ~ expr ~ "}" }

  // IDENTIFIERS
  // keywords are names that may not follow after \
  // e.g. \phi is a valid identifier, \left is not
  keyword = { "\\left" | "\\right" | "\\cdot" | "\\frac" | "\\sfrac" | "\\sqrt"| "\\infty" | "\\sum" | "\\prod" }
  identifier = @{ (!keyword ~ (simple_identifier | latex_symbol)) ~ subscript? }
  simple_identifier = _{ ASCII_ALPHA | ("\\text" ~ "{"~ nested_block ~"}") }
  latex_symbol = _{ "\\" ~ ASCII_ALPHA+ }
  // subscript = _{ "_" ~ "{" ~ ASCII_ALPHA* ~ "}" | "_" ~ ASCII_ALPHANUMERIC }
  subscript = { "_" ~ (ASCII_ALPHANUMERIC | "{" ~ nested_block ~ "}") }
  nested_block = { (!("{" | "}") ~ ANY)* ~ ("{" ~ nested_block ~ "}" ~ (!("{" | "}") ~ ANY)*)* }

  // OPERATORS
  // infix
  infix     = _{ 
    // optional whitespace around an infix operator is ok
    WHITESPACE* ~ (add | sub | mul | div | pow ) ~ WHITESPACE*
      // but also try to parse semantic white space for implicit mul
      | implicit
  }
  add       = { "+" } // Addition
  sub       = { "-" } // Subtraction
  mul       = { "\\cdot" } // Multiplication
  implicit = { WHITESPACE* }
  div       = { "/" } // Division
  pow       = { "^" } // Exponentiation
  // prefix
  prefix    = _{ neg | sum | prod }
  neg       = { "-" } // Negation
  sum       = { "\\sum" ~ reduction } // Summation
  // prod       = { "\\prod_" ~ reduction } // Product
  prod       = { "\\prod" ~ reduction } // Product
  reduction = _{ "_" ~ "{" ~ identifier ~ "=" ~ expr ~ "}" ~ "^" ~ (wrapped_digit | "{" ~ expr ~ "}" ) }
  // postfix
  postfix   = _{ fac }
  fac       = { "!" } // Factorial

  // UTILITIES
  // wrap a digit so it has an into_inner() like expressions do
  // in case either an integer OR an expression must be parsed, like in sums
  wrapped_digit = { digit }
